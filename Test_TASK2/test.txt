nasm -f elf a.asm
ld -m elf_i386 -s -o a a.o
./a
echo $?


./test2


cộng        add         inc 
trừ         sub         dec
nhân        mul
chia        div







section .data
    num db 198
    num2 db 200

    endLine db 0xa
    lenEnd equ $-endLine

    num3 times 35 db ''


section .bss
    string resb 100

section .text
global _start:

_start:
    mov al, [num]
    call _numToString

    mov eax, 4
    mov ebx, 1
    mov ecx, string
    mov edx, ebp
    int 0x80

    mov eax, 4
    mov ebx, 1
    mov ecx, endLine
    mov edx, lenEnd
    int 0x80


    xor eax, eax
    mov al, [num2]
    call _numToString

    mov eax, 4
    mov ebx, 1
    mov ecx, string
    mov edx, ebp
    int 0x80

    mov eax, 4
    mov ebx, 1
    mov ecx, endLine
    mov edx, lenEnd
    int 0x80

    mov eax, 1
    int 0x80


_numToString:; eax = NUM
    
    xor ecx, ecx

    step1:
        xor edx, edx
        mov ebx, 10
        div ebx
        add edx, '0'
        push edx
        inc ecx
        cmp al, 0
        jne step1
    
    ; eax = 0, ecx = chieu dai, edx = rac

    xor ebp, ebp
    LOOP:
        pop edx
        mov [string + ebp], edx
        inc ebp
        loop LOOP
    ;
    ret
    ; ecx = 0
    

stringtn:
;intput lenNum = ecx, string = ebx
;output num = eax
    mov al, 1
    mov byte [dau], al
    xor eax, eax
    xor esi, esi
    cmp byte [ebx], '-'
    jne step1
    mov byte [dau], al
    add esi, 1
    step1:
        mov dl, 10
        mul dl
        mov dl, [ebx + esi]
        sub edx, '0'
        add eax, edx
        add esi, 1
        cmp esi, ecx
        jne step1

    mov edx, 1
    cmp [dau], dl
    je step2
    neg eax
    step2:
        ret



